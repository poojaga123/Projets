#include "arduino_secrets.h"
// DHT sensor library - Version: Latest 
#include <DHT.h>
#include <DHT_U.h>

/* 
  Sketch generated by the Arduino IoT Cloud Thing "IOT cloud temperature controlled fan"
  https://create.arduino.cc/cloud/things/72c9880a-49d8-4daa-9916-3061debb65ac 
x,
  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float max_temp;
  float temperature;
  bool fan_on;
  bool override_fan_control;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#define DHTPIN 7
#define DHTTYPE DHT22
DHT dht(DHTPIN DHTTYPE);

#define fan 6
#define default_max_temp 0

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 


  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  //Initialize
  dht.begin();
  pinMode(fan, OUTPUT);
  digitalWrite(fan,LOW);//turns off fan
  if(max_temp == NULL){
    max_temp = default_max_temp;
  }
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  //read temperature data
  temperature=dht.readTemperature();
  Serial.print("Temp:");
  Serial.print(temperature);
  Serial.print("Celcius");
  //Control fan or regulate temperature bas+  
  
  
    ed on user input settings
  update_system();
  delay(5000);//delay for 5 seconds
}
void regulate_temperature(){
  if(temperature > max_temp){
    //turn on fan
    digitalWrite(fan, HIGH);
    fan_on = true;
  }
  else
  {
    digitalWrite(fan, LOW);
    fan_on = false;
  }
  }
void turn_fan_on_off(){
  if(fan_on){
    digitalWrite(fan, HIGH);
  } 
  else
  {
    digitalWrite(fan, LOW);
  }
}
void update_system()
{
  if(override_fan_control){
    turn_fan_on_off();
  }
  else
  {
    regulate_temperature();
  }
}
/*
  Since MaxTemp is READ_WRITE variable, onMaxTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMaxTempChange()  {
  // Add your code here to act upon MaxTemp change
  regulate_temperature();
}

/*
  Since OverrideFanControl is READ_WRITE variable, onOverrideFanControlChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onOverrideFanControlChange()  {
  // Add your code here to act upon OverrideFanControl change
  update_system();
}

/*
  Since FanOn is READ_WRITE variable, onFanOnChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFanOnChange()  {
  // Add your code here to act upon FanOn change
  update_system();
}

